<?php class Walker_Mega_Menu extends Walker_Nav_Menu  {  public function start_el( &$output, $item, $depth = 0, $args = array(), $id = 0 ) {		$indent = ( $depth ) ? str_repeat( "\t", $depth ) : '';		$classes = empty( $item->classes ) ? array() : (array) $item->classes;		$classes[] = 'menu-item-' . $item->ID;		/**		 * Filter the CSS class(es) applied to a menu item's list item element.		 *		 * @since 3.0.0		 * @since 4.1.0 The `$depth` parameter was added.		 *		 * @param array  $classes The CSS classes that are applied to the menu item's `<li>` element.		 * @param object $item    The current menu item.		 * @param array  $args    An array of {@see wp_nav_menu()} arguments.		 * @param int    $depth   Depth of menu item. Used for padding.		 */		$class_names = join( ' ', apply_filters( 'nav_menu_css_class', array_filter( $classes ), $item, $args, $depth ) );				// ========== ' . esc_attr( $item->custom ) . ' is from the Menu Settings ========== //		$class_names = $class_names ? ' class="' . esc_attr( $class_names ) . ' ' . esc_attr( $item->custom ) . '"' : '';		// Front Icon		$icon1 = esc_attr( $item->icon );		if ($icon1 == "") {			$icon_front = "";		} else {			$icon_front = '<i class="menu-icon-left '.$icon1.'"></i>';		}		// Back Icon		$icon2 = esc_attr( $item->icon2 );		if ($icon2 == "") {			$icon_back = "";		} else {			$icon_back = '<i class="menu-icon-right '.$icon2.'"></i>';		}		/**		 * Filter the ID applied to a menu item's list item element.		 *		 * @since 3.0.1		 * @since 4.1.0 The `$depth` parameter was added.		 *		 * @param string $menu_id The ID that is applied to the menu item's `<li>` element.		 * @param object $item    The current menu item.		 * @param array  $args    An array of {@see wp_nav_menu()} arguments.		 * @param int    $depth   Depth of menu item. Used for padding.		 */		$id = apply_filters( 'nav_menu_item_id', 'menu-item-'. $item->ID, $item, $args, $depth );		$id = $id ? ' id="' . esc_attr( $id ) . '"' : '';		$output .= $indent . '<li' . $id . $class_names .'>';		$atts = array();		$atts['title']  = ! empty( $item->attr_title ) ? $item->attr_title : '';		$atts['target'] = ! empty( $item->target )     ? $item->target     : '';		$atts['rel']    = ! empty( $item->xfn )        ? $item->xfn        : '';		$atts['href']   = ! empty( $item->url )        ? $item->url        : '';		/**		 * Filter the HTML attributes applied to a menu item's anchor element.		 *		 * @since 3.6.0		 * @since 4.1.0 The `$depth` parameter was added.		 *		 * @param array $atts {		 *     The HTML attributes applied to the menu item's `<a>` element, empty strings are ignored.		 *		 *     @type string $title  Title attribute.		 *     @type string $target Target attribute.		 *     @type string $rel    The rel attribute.		 *     @type string $href   The href attribute.		 * }		 * @param object $item  The current menu item.		 * @param array  $args  An array of {@see wp_nav_menu()} arguments.		 * @param int    $depth Depth of menu item. Used for padding.		 */		$atts = apply_filters( 'nav_menu_link_attributes', $atts, $item, $args, $depth );		$attributes = '';		foreach ( $atts as $attr => $value ) {			if ( ! empty( $value ) ) {				$value = ( 'href' === $attr ) ? esc_url( $value ) : esc_attr( $value );				$attributes .= ' ' . $attr . '="' . $value . '"';			}		}		//$item_output = $args->before;		$item_output = '<a'. $attributes .'>'.$icon_front.'';		/** This filter is documented in wp-includes/post-template.php */		$item_output .= apply_filters( 'the_title', $item->title, $item->ID );		$item_output .= $icon_back.'</a>';		//$item_output .= $args->after;		/**		 * Filter a menu item's starting output.		 *		 * The menu item's starting output only includes `$args->before`, the opening `<a>`,		 * the menu item's title, the closing `</a>`, and `$args->after`. Currently, there is		 * no filter for modifying the opening and closing `<li>` for a menu item.		 *		 * @since 3.0.0		 *		 * @param string $item_output The menu item's starting HTML output.		 * @param object $item        Menu item data object.		 * @param int    $depth       Depth of menu item. Used for padding.		 * @param array  $args        An array of {@see wp_nav_menu()} arguments.		 */		$output .= apply_filters( 'walker_nav_menu_start_el', $item_output, $item, $depth, $args );	}}// Add Back Buttons to Navigation for Side Menus  function skyline_back_button($items, $args) {            if ($args->theme_location == 'primary') {                $items .= '<li class="back-button"><a href="#"><i class="feather-rewind"></i>&nbsp;';                $items .= esc_html__('Go Back', 'skyline');                $items .= '</a></li>';                $items .= '<li class="back-button2"><a href="#"><i class="feather-rewind"></i>&nbsp;';                $items .= esc_html__('Go Back', 'skyline');                $items .= '</a></li>';            }            return $items;        }        add_filter('wp_nav_menu_items', 'skyline_back_button', 10, 2);		/* ==================================================ADD CART TO NAVIGATION================================================== */function skyline_add_cart_menu ( $items, $args ) {if( 'primary' === $args -> theme_location ) {global $woocommerce;$count = $woocommerce->cart->cart_contents_count;$items .= '<li class="menu-item menu-item-cart" id="cart">';$items .= '<a href="' . $woocommerce->cart->get_cart_url() . '" title="' . esc_html__( 'Checkout','skyline' ) . '"><i class="fa-shopping-bag"></i>&nbsp;<span class="cart-count">'.$count.'</span></a>';$items .= '</li>';}return $items;}$skyline_data = skyline_redux_data(); if ($skyline_data['cart-icon-menu'] == "1") {add_filter('wp_nav_menu_items','skyline_add_cart_menu',10,2);} else {	// Show Nothing}/* ==================================================ADD SEARCH TO NAVIGATION================================================== */function skyline_add_search_menu ( $items, $args ) {if( 'primary' === $args -> theme_location ) {$items .= '<li class="menu-item menu-item-search">';$items .= '<a href="#" id="main-search2" title="' . esc_html__( 'Search','skyline' ) . '"><i class="feather-search"></i></a>';$items .= '</li>';}return $items;}$skyline_data = skyline_redux_data(); if ($skyline_data['search_location'] == "1") {add_filter('wp_nav_menu_items','skyline_add_search_menu',10,2);} else {	// Show Nothing}/* ==================================================SET PRIMARY MENU AUTOMATICALLY================================================== */	//get 'your_custom_menu' id to assign it to the primary menu location created$menu_header = get_term_by('name', 'Primary Menu', 'nav_menu');$menu_header_id = $menu_header->term_id;//if menu not found, create a new oneif($menu_header_id == 0) {     $menu_header_id = wp_create_nav_menu('Primary Menu');	 // Add menu itemswp_update_nav_menu_item ( $menu_header_id, 0, array(   'menu-item-title' => esc_html__('Home','skyline'),   'menu-item-url' => home_url( '/' ),    'menu-item-status' => 'publish' ) );    //Get all locations (including the one we just created above)$locations = get_theme_mod('nav_menu_locations');//set the menu to the new location and save into database$locations['primary'] = $menu_header_id;set_theme_mod( 'nav_menu_locations', $locations );}?>